dnorm(x=Data$y, mean=mu1, sd=sigma1, log=T)
dnormv(x=mu1, mean=0, var=1000, log=T)
dgamma(sigma1, 25, log=T)
plot(out, BurnIn=200, Data, PDF=F)
out
plot(out, BurnIn=200, Data, PDF=F)
#######################################################################
plot(out, BurnIn=10, Data, PDF=F)
#######################################################################
plot(out, BurnIn=1, Data, PDF=F)
plot(out, BurnIn=1, Data, PDF=F)
plot(out, BurnIn=10, Data, PDF=F)
# Have a look at some summary statistics
plot(out, BurnIn=50, Data, PDF=F)
plot(out, BurnIn=20, Data, PDF=F)
st <- 5000      # Steps when status message should be given
nt <-20        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
plot(out, BurnIn=20, Data, PDF=F)
plot(out, BurnIn=20, Data, PDF=F)
plot(out, BurnIn=10, Data, PDF=F)
# Have a look at some summary statistics
plot(out, BurnIn=20, Data, PDF=F)
st <- 5000      # Steps when status message should be given
nt <-20        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
plot(out, BurnIn=20, Data, PDF=F)
parm <-  c(mu1=1, sigma1=log(30))    #  Initial.Values
Data <- list(mon.names="LP", parm.names=c("mean", "sd "), y=y)
Model <- function(parm, Data){
mu1 <- parm[1]; sigma1 <- exp(parm[2])
LL <- sum(dnorm(x=Data$y, mean=mu1, sd=sigma1, log=T))
mu1.prior <- dnormv(x=mu1, mean=0, var=1000, log=T)
sigma.prior <- dgamma(sigma1, 25, log=T)
LP <- LL + mu1.prior  + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL,  Monitor=c(LP),
yhat= rnorm(length(Data$y), mu1, sigma1), parm=parm)
return(Modelout)                   }
#out0 <- LaplacesDemon(Model, Data=Data, Initial.Values=parm, Iterations=10000)
ni <- 10000      # Number of draws from posterior (for each chain)
st <- 5000      # Steps when status message should be given
nt <-20        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
plot(out, BurnIn=20, Data, PDF=F)
#######################################################################
plot(out, BurnIn=200, Data, PDF=F)
parm <-  c(mu1=1, sigma1=log(30))    #  Initial.Values
Data <- list(mon.names="LP", parm.names=c("mean", "sd "), y=y)
Model <- function(parm, Data){
mu1 <- parm[1]; sigma1 <- exp(parm[2])
LL <- sum(dnorm(x=Data$y, mean=mu1, sd=sigma1, log=T))
mu1.prior <- dnormv(x=mu1, mean=0, var=1000, log=T)
sigma.prior <- dgamma(sigma1, 25, log=T)
LP <- LL + mu1.prior  + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL,  Monitor=c(LP),
yhat= rnorm(length(Data$y), mu1, sigma1), parm=parm)
return(Modelout)                   }
#out0 <- LaplacesDemon(Model, Data=Data, Initial.Values=parm, Iterations=10000)
ni <- 10000      # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <-10        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
plot(out, BurnIn=200, Data, PDF=F)
plot(out, BurnIn=200, Data, PDF=F)
log(-100:100)
exp(-100:100)
require(LaplacesDemon)          #  R package
parm <-  c(mu1=1, sigma1=log(30))    #  Initial.Values
Data <- list(mon.names="LP", parm.names=c("mean", "sd "), y=y)
Model <- function(parm, Data){
mu1 <- parm[1]; sigma1 <- exp(parm[2])
LL <- sum(dnorm(x=Data$y, mean=mu1, sd=sigma1, log=T))
mu1.prior <- dnormv(x=mu1, mean=0, var=1000, log=T)
sigma.prior <- dgamma(sigma1, 25, log=T)
LP <- LL + mu1.prior  + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL,  Monitor=c(LP),
yhat= rnorm(length(Data$y), mu1, sigma1), parm=parm)
return(Modelout)                   }
#out0 <- LaplacesDemon(Model, Data=Data, Initial.Values=parm, Iterations=10000)
ni <- 10000      # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <-10        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
out
require(LaplacesDemon)          #  R package
parm <-  c(mu1=1, sigma1=log(30))    #  Initial.Values
Data <- list(mon.names=c("LP", 'sd'), parm.names=c("mean", "log.sd "), y=y)
Model <- function(parm, Data){
mu1 <- parm[1]; sigma1 <- exp(parm[2])
LL <- sum(dnorm(x=Data$y, mean=mu1, sd=sigma1, log=T))
mu1.prior <- dnormv(x=mu1, mean=0, var=1000, log=T)
sigma.prior <- dgamma(sigma1, 25, log=T)
LP <- LL + mu1.prior  + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL,  Monitor=c(LP, sigma1),
yhat= rnorm(length(Data$y), mu1, sigma1), parm=parm)
return(Modelout)                   }
#out0 <- LaplacesDemon(Model, Data=Data, Initial.Values=parm, Iterations=10000)
ni <- 10000      # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <-10        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
plot(out, BurnIn=200, Data, PDF=F)
plot(out, BurnIn=10, Data, PDF=F)
#######################################################################
##########################################
###############################################################
plot(out, BurnIn=30, Data, PDF=F)
# Have a look at some summary statistics
plot(out, BurnIn=30, Data, PDF=F)
plot(out, BurnIn=50, Data, PDF=F)
plot(out, BurnIn=500, Data, PDF=F)
st <- 2000      # Steps when status message should be given
nt <-50        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
plot(out, BurnIn=500, Data, PDF=F)
plot(out, BurnIn=50, Data, PDF=F)
st <- 2000      # Steps when status message should be given
nt <-50        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
plot(out, BurnIn=50, Data, PDF=F)
out
plot(out, BurnIn=100, Data, PDF=F)
ni <- 50000      # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <-50        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
plot(out, BurnIn=100, Data, PDF=F)
plot(out, BurnIn=50, Data, PDF=F)
plot(out, BurnIn=50, Data, PDF=F)
#
#
#
#
plot(out, BurnIn=20, Data, PDF=F)
###############################################################
# Have a look at some summary statistics
#
#
#
#
plot(out, BurnIn=30, Data, PDF=F)
ni <- 50000      # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <-20        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
#
#
#
#
plot(out, BurnIn=20, Data, PDF=F)
out
exp(-100:100)
Model <- function(parm, Data){
plot(exp(-100:100))
plot(exp(-100:100))
#
#
#
#
plot(out, BurnIn=30, Data, PDF=F)
#
#
#
plot(out, BurnIn=50, Data, PDF=F)
#
#
#
#
plot(out, BurnIn=200, Data, PDF=F)
ni <- 100000      # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <- 20        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
#
#
#
#
plot(out, BurnIn=200, Data, PDF=F)
###############################################################
#
#
#
#
plot(out, BurnIn=200, Data, PDF=F)
out
#
#
#
plot(out, BurnIn=10, Data, PDF=F)
#
#
#
plot(out, BurnIn=20, Data, PDF=F)
#
plot(out, BurnIn=50, Data, PDF=F)
#
#
plot(out, BurnIn=100, Data, PDF=F)
ni <- 100000      # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <- 50        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
#
#
#
#
plot(out, BurnIn=100, Data, PDF=F)
out
mean(y)
sd(y)
ni <- 10000     # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <- 50        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
#
#
#
#
plot(out, BurnIn=100, Data, PDF=F)
st <- 2000      # Steps when status message should be given
nt <- 40        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
#
#
#
out
require(LaplacesDemon)          #  R package
parm <-  c(mu1=1, log.sigm=log(30))    #  Initial.Values
Data <- list(mon.names=c("LP", "sigmma"), parm.names=c("mean", "log.sigm"), y=y)
Model <- function(parm, Data){
mu1 <- parm[1]; sigma1 <- exp(parm[2])
LL <- sum(dnorm(x=Data$y, mean=mu1, sd=sigma1, log=T))
mu1.prior <- dnormv(x=mu1, mean=0, var=1000, log=T)
sigma.prior <- dgamma(sigma1, 25, log=T)
LP <- LL + mu1.prior  + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL,  Monitor=c(LP, sigma1),
yhat= rnorm(length(Data$y), mu1, sigma1), parm=parm)
return(Modelout)                   }
#out0 <- LaplacesDemon(Model, Data=Data, Initial.Values=parm, Iterations=10000)
ni <- 50000     # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <- 40        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
#
#
#
#
plot(out, BurnIn=100, Data, PDF=F)
#
#
#
plot(out, BurnIn=100, Data, PDF=T)
#######################################################################
##########################################
getwd()
require(LaplacesDemon)          #  R package
parm <-  c(mu1=1, log.sigm=log(30))    #  Initial.Values
Data <- list(mon.names=c("sigmma"), parm.names=c("mean", "log.sigm"), y=y)
Model <- function(parm, Data){
mu1 <- parm[1]; sigma1 <- exp(parm[2])
LL <- sum(dnorm(x=Data$y, mean=mu1, sd=sigma1, log=T))
mu1.prior <- dnormv(x=mu1, mean=0, var=1000, log=T)
sigma.prior <- dgamma(sigma1, 25, log=T)
LP <- LL + mu1.prior  + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL,  Monitor=c(sigma1),
yhat= rnorm(length(Data$y), mu1, sigma1), parm=parm)
return(Modelout)                   }
#out0 <- LaplacesDemon(Model, Data=Data, Initial.Values=parm, Iterations=10000)
ni <- 30000     # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <- 50        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
#
#
#
plot(out, BurnIn=100, Data, PDF=T)
#
plot(out, BurnIn=100, Data, PDF=T)
ni <- 50000     # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <- 50        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
#
#
#
#
plot(out, BurnIn=100, Data, PDF=T)
ni <- 80000     # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <- 50        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
#
#
#
plot(out, BurnIn=100, Data, PDF=T)
out
require(LaplacesDemon)          #  R package
parm <-  c(mu1=1, log.sigm=log(10))    #  Initial.Values
Data <- list(mon.names=c("sigmma"), parm.names=c("mean", "log.sigm"), y=y)
ni <- 50000     # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <- 50        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
#
#
#
plot(out, BurnIn=100, Data, PDF=T)
#######################################################################
out
plot(out, BurnIn=50, Data, PDF=T)
require(LaplacesDemon)          #  R package
parm <-  c(mu1=105, log.sigm=log(8.5))    #  Initial.Values
Data <- list(mon.names=c("sigmma"), parm.names=c("mean", "log.sigm"), y=y)
Model <- function(parm, Data){
mu1 <- parm[1]; sigma1 <- exp(parm[2])
LL <- sum(dnorm(x=Data$y, mean=mu1, sd=sigma1, log=T))
mu1.prior <- dnormv(x=mu1, mean=0, var=1000, log=T)
sigma.prior <- dgamma(sigma1, 25, log=T)
LP <- LL + mu1.prior  + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL,  Monitor=c(sigma1),
yhat= rnorm(length(Data$y), mu1, sigma1), parm=parm)
return(Modelout)                   }
#out0 <- LaplacesDemon(Model, Data=Data, Initial.Values=parm, Iterations=10000)
ni <- 50000     # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <- 50        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
#
#
#
plot(out, BurnIn=50, Data, PDF=T)
#######################################################################
out
ni <- 100000     # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <- 50        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
#
#
#
plot(out, BurnIn=50, Data, PDF=T)
#
plot(out, BurnIn=50, Data, PDF=T)
# Run LaplacesDemon
out
plot(out, BurnIn=100, Data, PDF=T)
plot(out, BurnIn=300, Data, PDF=T)
n <- 8000     # Number of females
mu1  <- 105   # Population mean for females
sigma1 <- 8.5 # Population SD for females
y <- rnorm(n, mean= mu1, sd=sigma1) # Data for females
mean(y)
sd(y)
boxplot(y)
hist(y)
plot(y)
abline(h=105, col=2)
###########################
require(LaplacesDemon)          #  R package
parm <-  c(mu1=105, log.sigm=log(8.5))    #  Initial.Values
Data <- list(mon.names=c("sigmma"), parm.names=c("mean", "log.sigm"), y=y)
Model <- function(parm, Data){
mu1 <- parm[1]; sigma1 <- exp(parm[2])
LL <- sum(dnorm(x=Data$y, mean=mu1, sd=sigma1, log=T))
mu1.prior <- dnormv(x=mu1, mean=0, var=1000, log=T)
sigma.prior <- dgamma(sigma1, 25, log=T)
LP <- LL + mu1.prior  + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL,  Monitor=c(sigma1),
yhat= rnorm(length(Data$y), mu1, sigma1), parm=parm)
return(Modelout)                   }
#out0 <- LaplacesDemon(Model, Data=Data, Initial.Values=parm, Iterations=10000)
ni <- 1000000    # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <- 50        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
# Have a look at some summary statistics
#
#
plot(out, BurnIn=50, Data, PDF=T)
#
plot(out, BurnIn=50, Data, PDF=T)
#######################################################################
##################
out
mean(y)
sd(y)
#
boxplot(y ~ x, col="grey", xlab="Male", ylab="Wingspan (cm)", las=1)
n1 <- 6000     # Number of females
n2 <- 4000     # Number of males
mu1 <- 105   # Population mean for females
mu2 <- 75.5  # Population mean for males
sigma1 <- 8.5 # Population SD for females
sigma2 <- 2.5 # Population SD for males
n <- n1+n2    # Total sample size
y1 <- rnorm(n1, mean= mu1, sd=sigma1) # Data for females
y2 <- rnorm(n2, mean=mu2, sd=sigma2)  # Data for males
y <- c(y1, y2)   # Aggregate both data sets
x <- rep(c(0,1), c(n1, n2))  # Indicator for male
#
boxplot(y ~ x, col="grey", xlab="Male", ylab="Wingspan (cm)", las=1)
#
boxplot(y ~ x, col="grey", xlab="Male", ylab="Wingspan (cm)", las=1)
#
mean(y)
sd(y)
boxplot(y)
hist(y)
n <- 8000     # Number of females
mu1  <- 105   # Population mean for females
sigma1 <- 8.5 # Population SD for females
y <- rnorm(n, mean= mu1, sd=sigma1) # Data for females
hist(y)
n <- 8000     # Number of females
mu1  <- 105   # Population mean for females
sigma1 <- 8.5 # Population SD for females
y <- rnorm(n, mean= mu1, sd=sigma1) # Data for females
mean(y)
sd(y)
boxplot(y)
hist(y)
plot(y)
abline(h=105, col=2)
boxplot(y)
hist(y)
plot(y)
abline(h=105, col=2)
hist(y)
require(LaplacesDemon)          #  R package
parm <-  c(mu1=105, log.sigm=log(8.5))    #  Initial.Values
Data <- list(mon.names=c("sigmma"), parm.names=c("mean", "log.sigm"), y=y)
Model <- function(parm, Data){
mu1 <- parm[1]; sigma1 <- exp(parm[2])
LL <- sum(dnorm(x=Data$y, mean=mu1, sd=sigma1, log=T))
mu1.prior <- dnormv(x=mu1, mean=0, var=1000, log=T)
sigma.prior <- dgamma(sigma1, 25, log=T)
LP <- LL + 2 * mu1.prior  + 2 * sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL,  Monitor=c(sigma1),
yhat= rnorm(length(Data$y), mu1, sigma1), parm=parm)
return(Modelout)                   }
#out0 <- LaplacesDemon(Model, Data=Data, Initial.Values=parm, Iterations=10000)
ni <- 80000   # Number of draws from posterior (for each chain)
st <- 2000      # Steps when status message should be given
nt <- 50        # Thinning rate #  Abate autocorrelation
# Run LaplacesDemon
out <- LaplacesDemon(Model, Data=Data, Initial.Values=parm,
Iterations=ni, Status=st, Thinning=nt)
